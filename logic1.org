* [[https://class.coursera.org/logic1-002/lecture][Logic: Language and Information 1]]

** [[http://www.inf.ed.ac.uk/teaching/courses/lp/][Logic Programming Fall term 2014 ]]
** [[https://d396qusza40orc.cloudfront.net/logic1%2Fnotes%2Flogic1notes.pdf][logic Language & Information volume 1]]

** 0: Preliminaries
*** DONE Welcome (8:47)
    CLOSED: [2015-02-27 Fri 08:22]


** 1: Language and Models of Propositional Logic (Core)
*** DONE 1.1.1 Propositions (5:17)
    CLOSED: [2015-02-28 Sat 06:06]
*** DONE 1.1.2 Connectives (19:44)
    CLOSED: [2015-02-03 Tue 06:46] SCHEDULED: <2015-03-02 Mon>
    + Connectives (կապեր)
      1. Conjuction
         - p & q
         - p and q
      2. or - inclusive Disjunction v (vel in Latin)
         - p v q
         - inclusive "I'll get wet, or I'm lucky (and maybe both)'
         - exclusive "I'll get wet, or I'm lucky (and not both)"
      3. Negation
         if p is propostion, its negation is ~p
         p is said to be the negand of ~p
         - ~p
         - !p
         - not p
      4. Conditionals
         We say p is the antecedent, and q is the consequent
         - if p then q
         - if p, q
         - q if p
         - p only if q
         - p implies q (ենթադրել)
      5. unless
      6. biconditional if-only-if (iff) p=q
         p and q are the left-and right-hand expressions of the biconditional
      7. that
      8. because

*** DONE 1.1.3 Propositional Formulas (9:23)
    CLOSED: [2015-03-03 Tue 07:21] SCHEDULED: <2015-03-03 Tue>
    Formulas := {Atoms | Formulas}
*** DONE 1.1.4 Formalisation (7:00)
    CLOSED: [2015-03-04 Wed 06:14] SCHEDULED: <2015-03-04 Wed>
    Տեքստը ֆորմալ լեզվով ներկայացնելը, այսինքն թարգմանելը ասույթների լեզվին, կանվանենք ֆորմալիզացիա:
    Ֆորմալիզացիայի համար 
     - Գտնենք կապերը
     - Ստեղծել բառարան
     - Գտնել ձևերը

*** DONE 1.1.5 Expressive power (8:40)
    CLOSED: [2015-03-04 Wed 06:22] SCHEDULED: <2015-03-04 Wed>
*** DONE 1.2.1 Setting Up Truth Tables (6:35)
    CLOSED: [2015-03-05 Thu 07:19] SCHEDULED: <2015-03-05 Thu>
    Ասույթների լեզվի սեմանտիկան: Ասույթներ կարող են լինել «ճիշտ» կամ «սխալ» մեկ այլ նշանակւոմով 1 կամ 0
    Հավանանային տրամաբանության մեջ արժեքների տիրույթը ամբողջ [0,1] հատվաղն է:
*** DONE 1.2.2 Negation, Conjunction and Disjunction (10:37)
    CLOSED: [2015-03-05 Thu 07:55] SCHEDULED: <2015-03-05 Thu>
    - Տրամաբանական կապերի ճշմարտության աղյուսակները
      - Ժխտմանը
        Եթե ունենք Ա ասույթ, ապա ~Ա բանաձևի ճշմարտության աղյուսակը, որը 
        ցույց է տալիս ~Ա բանաձևի «ճիշտ» կամ «սխալ» լինելը կախված Ա ասույթի 
        «ճիշտ» կամ «սխալ» լինելուց, հետևյալն է՝

        | A | ~A |
        |---+----|
        | 0 |  1 |
        | 1 |  0 |
        |---+----|

      - տրամաբանական և կամ Կոնյուկցիա
        կոմուտատիվ է
        
        | A | B | (A & B) |
        |---+---+---------|
        | 0 | 0 |       0 |
        | 0 | 1 |       0 |
        | 1 | 0 |       0 |
        | 1 | 1 |       1 |
        |---+---+---------|

      - տրամաբանական կամ կամ Դիսյուկցիա
        դուալ է կոնյուկցիայի նկատմամբ
        կոմուտատիվ է


        | A | B | (A v B) |
        |---+---+---------|
        | 0 | 0 |       0 |
        | 0 | 1 |       1 |
        | 1 | 0 |       1 |
        | 1 | 1 |       1 |
        |---+---+---------|

      - Բարդ բանաձևի օրինակ

        | p | q | ~ (~ p & ~ q) | (p v q) |
        |---+---+---------------+---------|
        | 0 | 0 | 0  1 0 1 1 0  |    0    |
        | 0 | 1 | 1  1 0 0 0 1  |    1    |
        | 1 | 0 | 1  0 1 0 1 0  |    1    |
        | 1 | 1 | 1  0 1 0 0 1  |    1    |
        |---+---+---------------+---------|
        |   |   | 3  1 0 2 1 0  |         |

      - 
     
*** DONE 1.2.3 The Material Conditional & Biconditional (11:50)
    CLOSED: [2015-03-06 Fri 06:28] SCHEDULED: <2015-03-06 Fri>
    - տրամաբանական հետևություն
        
        | A | B | (A -> B) |
        |---+---+----------|
        | 0 | 0 |        1 |
        | 0 | 1 |        1 |
        | 1 | 0 |        0 |
        | 1 | 1 |        1 |
        |---+---+----------|

        (A->B) համարժեք է ~(A & ~B)

    - տրամաբանական նույնություն
        
        | A | B | (A = B)  |
        |---+---+----------|
        | 0 | 0 |        1 |
        | 0 | 1 |        0 |
        | 1 | 0 |        0 |
        | 1 | 1 |        1 |
        |---+---+----------|
      (A=b) համարժեք է (A->B)&(B->A)



*** DONE 1.3.1 Classifying Propositions (11:18)
    CLOSED: [2015-03-07 Sat 07:20] SCHEDULED: <2015-03-07 Sat>
    1. Տավտալոգիա (tautology)
      Ա ասույթային բանաձևը կանվանենք տավտոլոգիա, եթե միշտ ընդունում է 1 արժեքը
       - Օրինակ. 
         * (p V ~p),
         * (pVq)=~(~p&~q) (p&q)=~(~pV~q) (de Morgan's lows)
         * ((p->q)&~q)->~p (Modus tollens)
         * (p->q)=(~q->~p) ()

    2. Հակասություն (Contradiction) 
       ասույթային բանաձևը կանվանենք տավտոլոգիա, եթե միշտ ընդունում է 0 արժեքը
       - Օրինակ. 
         * (p & ~p),
         * (p->q)&(p->~q)
         * 
    3. Կատարելի (satisfiable)
       ունի առնվազմն մեկ հատ 1 իր ճշմարտության աղյուսակում
    4. Դիպվածային (contingent)
       Եթե Կատարելի է բայգ տավտոլոգիա չէ
    5. ասույթային բանաձևը տավտոլոգիա է 
       - միայն ու միայն այն դեպում եթե ~A is not satisfiable
       - միայն ու միայն այն դեպում եթե ~A is a contradiction

*** DONE 1.3.2 Relationships Between Propositions (14:26)
    CLOSED: [2015-03-08 Sun 08:52] SCHEDULED: <2015-03-08 Sun>
    Հարաբերություններ ասույթների միջև
    1. Տրամաբանական հետևություն (consequence)
       կասենք Բ բանաձևը Ա բանաձևի տրամաբանական հետևություն է, եթե 
       այն տողերում որտեղ Ա բանաձը ճիշտ է Բ էլ է ճիշտ:
       A |= B
       A logical implies B - ենթադրել
       A logical entails B - հանգեցնել 
      
       Օրինակ. p & ~q |= ~p V ~q, քանի որ
    
       | p | q | p & ~q | ~p V ~q |
       |---+---+--------+---------|
       | 0 | 0 |      0 |       1 |    
       | 0 | 1 |      0 |       1 |
       | 1 | 0 |      1 |       1 |         
       | 1 | 1 |      0 |       0 |
       |---+---+--------+---------|

    2. Տրամաբանական նույնություն (equivalence)
       կասենք Ա բանաձևը տրամաբանորեն նույնական է  Բ բանաձևին, 
       եթե բոլոր տողերում Ա և Բ բանաձևերը ընդունում են նույն արժեքները:
       A =|= B
       Թերորեմ: կամայական A և B ասույթային բանաձևեր հարաբերվում են որպես.
       1) տրամաբանական նույնություններ A =|= B 
          * միայն ու միայն այն դեպքում, երբ  A|= B և  B |= A:
          * միայն ու միայն այն դեպքում, երբ  (A = B) տավտալոգիա է
       2) տրամաբանական հետևություն A |= B
          միայն ու միայն այն դեպքում, երբ  (A -> B) տավտալոգիա է
    3. Տրամաբանական հակասություն (contradictories)
       կասենք Ա բանաձևը տրամաբանորեն հակասական է  Բ բանաձևին, 
       եթե բոլոր տողերում Ա և Բ բանաձևերը ընդունում են հակադիր արժեքներ:
       A =|= B
       Թերորեմ: կամայական A և B ասույթային բանաձևեր տրամաբանական հակասական են, եթտ
       * միայն ու միայն այն դեպքում, երբ  A =|= ~B
       * միայն ու միայն այն դեպքում, երբ  (A = ~B) տավտալոգիա է
    4. Տրադիցիոն տրամաբանանակն հարաբերություններ
       1) հակասություն contraries
          Ա և Բ բանաձևերը հակասական են, եթե նրանք երկուսն էլ չեն կարող լինել ճշմարիտ՝
          Բ սխալ է այն տողերում երբ Ա ճիշտ է, և Ա սխալ է երբ Բ ճիշտ է:
          ~(pvq) p&q, these formulas are contraries but does not sub-contraries.
          Թերորեմ: կամայական A և B ասույթային բանաձևեր հակասություններ են, եթե
          * միայն ու միայն այն դեպքում, երբ  A |= ~B
          * միայն ու միայն այն դեպքում, երբ  (A -> ~B) տավտալոգիա է

       2) ենթահակասություն sub-contraries
          Ա և Բ բանաձևերը ենթա-հակասական են, եթե նրանք երկուսն էլ չեն կարող լինել սխալ՝
          Բ ճիշտ է այն տողերում երբ Ա սխալ է, և Ա ճիշտ է երբ Բ սխալ է:
          Թերորեմ: կամայական A և B ասույթային բանաձևեր ենթա- հակասություններ են, եթե
          * միայն ու միայն այն դեպքում, երբ  ~A |= B
          * միայն ու միայն այն դեպքում, երբ  (~A -> B) տավտալոգիա է
         
*** DONE Graded Quiz 1a: The Propositional Language
    CLOSED: [2015-03-06 Fri 06:45] SCHEDULED: <2015-03-06 Fri>
*** DONE Graded Quiz 1b: Models of Propositional Logic
    CLOSED: [2015-03-07 Sat 07:28] SCHEDULED: <2015-03-07 Sat>
*** DONE Practice Quiz: 1a The Propositional Language
    CLOSED: [2015-03-09 Mon 19:30] SCHEDULED: <2015-03-08 Sun>
*** DONE Practice Quiz: 1b Models of Propositional Logic
    SCHEDULED: <2015-03-07 Sat>
*** Practice Quiz: 2a Using Truth Tables to Check for Logical Relations and Validity 
*** Practice Quiz: 2b Trees for Propositional Logic

** 2: Proofs for Propositional Logic (Core)
*** DONE 2.1.1 Validity of Arguments (9:38)
    CLOSED: [2015-03-09 Mon 10:54] SCHEDULED: <2015-03-09 Mon>
    պնդումների վավերականության մասին:
    ճշմարության աղյուսակների միջոցով վավերականության ստուգումը

    - պնդումը կապում է նախադրյալները(premises) եզրահանգմանը: Կան լավ և ոչ այնքան լավ պնդումներ:
      Տրամաբաններին հետաքրքրում է ինչով է պայմանավորված տարբերությունը:
    - պնդումը վավերական է եթե բոլոր նախադրյալները ճիշտ են ապա եզրահանգումը նույնպես ճիշտ է:
      Պնդում որոնք պարունկաում է A1, A2, ..., An նախադրյլանե և B եզրահանգումը մենք կգրենք
      A1, A2, ..., An |= B, պնդումը որ A1, A2, ..., An հետևում է B վավերական է: 
      arguemnt from premisies to conclusion B is valid.
    - օրինակ.
     A1 = (p&~q)->r
     A2 = ~r
     B = p->q
     ---------
      պետք է ստուգենք A1, A2 |= B պնդման վավերականությունը

      | # | p | q | r | (p&~q)->r | ~r | p -> q |   |
      |---+---+---+---+-----------+----+--------+---|
      | 1 | 0 | 0 | 0 |         1 |  1 |      1 | + |
      | 2 | 0 | 0 | 1 |         1 |  0 |      1 |   |
      | 3 | 0 | 1 | 0 |         1 |  1 |      1 | + |
      | 4 | 0 | 1 | 1 |         1 |  0 |      1 |   |
      | 5 | 1 | 0 | 0 |         0 |  1 |      0 |   |
      | 6 | 1 | 0 | 1 |         1 |  0 |      0 |   |
      | 7 | 1 | 1 | 0 |         1 |  1 |      1 | + |
      | 8 | 1 | 1 | 1 |         1 |  0 |      1 |   |
      |---+---+---+---+-----------+----+--------+---|
      #+TBLFM: $1=vlen(@I$1..0);EN

      վավերականություն հաստատելու համար պետք է նաենք այն տողերը որտեղ 
      A1 և A2 նախադրյալները ընդունում են ճշմարիտ արժեք. 1-ին, 3-րդ և 7-րդ տողերը
      և համոզվենք որ համապատասխան տողերում եզրահանգումը նույնպես ընդունում է 
      ճշմարիտ արժեք, հետևաբար վավերական է մեր պնդումը:





**** Վարհանգման թեորեմ Deduction theorem (semantic form)
     տրամաբանական հետևության և տավտոլոգիայի հարաբերությունից կարող են տալ 
     համապատասխան հարաբերություն պնդման վավերականության և տավտոլոգիայի միջև:
     Թեորեմ. պնդումը A1, A2, ..., An նախադրյալներից դեպի եզրահանգումը վավերական է, այսինքն
     A1, A2, ..., An |= B , միայն ու միայն այն դեպքում  (iff)
     (A1 & A2 & ... & An) -> B տավտոլոգիա է, այսինքն
     (A1 & A2 & ... & An) |= B
     Σ A |= B iff Σ |= A->B

           

*** DONE 2.1.2 Argument Forms, Instances and Soundness (16:42)
    CLOSED: [2015-03-10 Tue 07:45] SCHEDULED: <2015-03-10 Tue>
    Խոսակցական լեզվով արտահայտված պնդումը կարելի է ներկայացնել
    տրամաբանական ձևերով որպես տրամաբանական պնդում և ստուգել վավերականուլյունը, 
    այդ ներկայացում միարժեք չէ:
    պնդումը դա բանաձևերի ցուցակ է՝ մեկ և ավել նախադրյլաների և մեկ եզրահանգման:
    1. Soundness of Argument
       An argument is sound if and only if it is an instance of a valid argument form,
       and in addition, the premises are in fact all true.
    2. Sound arguments are instances of valid argument forms whose promises are also true.
    3. But, some instances of invalid argument forms can still be valid arguments.
    4. For an argument to be invalid, there has to be at least one situation in which the 
       premises are all true, but the conclusion is false at the same time.
    
*** DONE 2.2.1 Why We Need Proof Trees (15:12)
    CLOSED: [2015-03-12 Thu 07:16] SCHEDULED: <2015-03-12 Thu>
    previous lessons was introduced Truth tables to classify formulas and relationsheeps between them.
    in this and nex lessons we will introduce Proof trees is another way to analyse formulas 
    and their logical relationsheeps between them.
    Երբ պնդման մեջ ասուլձների քանակ շատանում էշ ճշմարտության աղյուսակներ նույնպես մեծանում են և գործնականում
    անհնարին է դառնում դրանց հետ օգտագործումը վավերականությունը ստուգելիս:
    A Proof tree is a graphical and mechianical way of determining wheather an argument form is valid, 
    or wheather a formula is a tautology.
    A tree for a set of formulas Closes if and only if each if its branches contains a contradiction. 
    Then There is no way for these formulas to be true together. 
    
*** DONE 2.2.2 Rules for Proof Trees for Propositional Logic (9:07)
    CLOSED: [2015-03-12 Thu 07:34] SCHEDULED: <2015-03-12 Thu>
    Positive and negative rues for connectives
    1. A & B = True, mean
         |
         A
         B
    2. ~(A & B) = True, mean
        /   \
      ~A    ~B
    3. (A v B) = True, mean
         / \    
        A   B
    4. ~(A v B) = True, mean A = B = False, since we write ~A, ~B in proof tree we write only True forms of atoms
           |
          ~A
          ~B
    5. A -> B  = True, mean
        / \ 
       ~A  B
    6. ~(A -> B)
            |
            A
            ~B
    7. A = B
       /   \
       A   ~A 
       B   ~B
    8. ~(A = B)
        /   \ 
        A   ~A
       ~B    B
    9. ~~A
         |
         A
    10.  A  closure rule
        ~A
         x   close this branch

*** DONE 2.2.3 Example Proof Trees for Propositional Logic (14:35)
    CLOSED: [2015-03-14 Sat 06:22] SCHEDULED: <2015-03-14 Sat>
*** DONE 2.2.4 Why Trees and Truth Tables Agree (14:02)
    CLOSED: [2015-03-14 Sat 06:36] SCHEDULED: <2015-03-14 Sat>
*** DONE Graded Quiz 2a: Using Truth Tables to Check for Logical Relations and Validity (5 marks) 
    CLOSED: [2015-03-10 Tue 08:40] SCHEDULED: <2015-03-10 Tue>
*** DONE Graded Quiz 2b: Trees for Propositional Logic (15 marks) 
    CLOSED: [2015-03-14 Sat 10:14] SCHEDULED: <2015-03-14 Sat>
*** DONE Practice Quiz: 2a Using Truth Tables to Check for Logical Relations and Validity (5 marks)
    CLOSED: [2015-03-10 Tue 08:48] SCHEDULED: <2015-03-14 Sat>
*** DONE Practice Quiz: 2b Trees for Propositional Logic (15 marks) 
    CLOSED: [2015-03-14 Sat 10:15] SCHEDULED: <2015-03-14 Sat>


** 3: Combinational Digital Systems (Application: Engineering)

*** Brief history of digital systems
    1. George Bool (1815-1864)
       founder of propositional logic and boolean algebra
    2. Charles Sander Peirce (1839-1914)
       Truth tables, not-or/or connectives(Peirce arrow)
       Pragmatic theory of language of truth.
       first use Boolean algebra and propositional logic  to analyse relay and switching circuits.
    3. Claude Elwood Shannon (1916-2001) 
       Information theory, define what is mean digitize analog signal and deconstruct it to analog.
    4. Years
       1937: first binary adder
       1947: first poin-contact transistor
       1958: first integrated circuit
       1969: birth of ARPANET, precursor of internet
       1991: first digital mobile phones
*** 2008: first memristor produced
    memristor can implement both
    - comninational digital system
    - sequential digital system
       
       
       

*** DONE 3.1 Digital Signals & Systems (17:55)
    CLOSED: [2015-03-15 Sun 17:34] SCHEDULED: <2015-03-15 Sun>
   1. Combinational digital systems: memoryless
      The current value of each output signal is a function of the current value of the input signals
      -and does not depend on past value of input signals.
     Examples of usage or key classes of job done by combinational digital systems:
      - Encoding and decoding
      - Selecting and distibuting 
        multiplexers (MUX) is data selector
        and demultiplexers(DEMUX)  is data distributor
      - Binary arithmetic
      - Comparison and classifications
   2. Sequential digital systems: contain memporu via combinational and delat components in 
      feedback loops, plus digital clock.
      Memory registers are used to keep track of past values of input signals, with values in memory
      recorded by internal state signals, together with clock imput  signal to keep time.
      in second oart of this course will learn about this kind of systems.

*** DONE 3.2 Logic Gates & Logic Circuits (13:23)
    CLOSED: [2015-03-15 Sun 18:17] SCHEDULED: <2015-03-15 Sun>
    Combinational digital system  is a digital system such that each output can be expressed
    as a propositional logic formula in terms of the inputs (using only AND, OR and NOT)
    (A&B) - A.B or AB in boolean algebra
    (AvB) - A+B notation in boolean algebra
    ~A - A' 
    ~(p v q) - NOR gate  also known as Peirce arrow (1881)
    ~(p & q) - (|)  NAND gate also known as Sheffer strole (1913)
    ~(p≡q) ≡ (p&~q)v(~p&q)  - XOR Exclusive or 
    
    All classic propositional connectives can be expressed in terms fo NAND (or NOR)
    ~A ≡ (A|A)
    (AvB) ≡ ((A|A)|(B|B))
    (A&B) ≡ ((A|B)|(A|B))

**** Logic Circuit diagrams for Combinational Systems
     Basic Constructors: 
     - AND, OR, NOT gates
     - NAND only
     - NOR only

     
*** DONE 3.3 Truth Tables, Logic Formulas & Logic Circuits (28:54)
    CLOSED: [2015-03-16 Mon 09:10] SCHEDULED: <2015-03-16 Mon>
    Different representation of combinational digital systems
    1. Functional descriptions
    2. Truth tables
    3. Logic formulas
    4. Logic Circuit diagrams
    How to transfor one representation to another.

**** Binary Coded Decimal (BCD) Encoder 
    Functional Description - pushing the button on cell phone
     system has: 
     10 inputs: p0,p1,p2,p3,p4,p5,p6,p7,p8,p9
     4 data outputs: m3, m2, m1, m0
     1 error signal: r such that: if exactly one on the inputs pi is active then r = 0 and q is 4bit value of decimal i,
                     while if either zero or more of the imputs are active, then r is 1 and m=0000.
     
   Truth Table                
     rows = 2 * 10, only 10 row is matter, when r=0, others do not care -no matter
     |    | p0 | p1 | p2 | p3 | p4 | p5 | p6 | p7 | p8 | p9 |   | r | m3 | m2 | m1 | m0 |
     |----+----+----+----+----+----+----+----+----+----+----+---+---+----+----+----+----|
     | s0 |  1 |  0 |  0 |  0 |  0 |  0 |  0 |  0 |  0 |  0 |   | 0 |  0 |  0 |  0 |  0 |
     | s1 |  0 |  1 |  0 |  0 |  0 |  0 |  0 |  0 |  0 |  0 |   | 0 |  0 |  0 |  0 |  1 |
     | s2 |  0 |  0 |  1 |  0 |  0 |  0 |  0 |  0 |  0 |  0 |   | 0 |  0 |  0 |  1 |  0 |
     | s3 |  0 |  0 |  0 |  1 |  0 |  0 |  0 |  0 |  0 |  0 |   | 0 |  0 |  0 |  1 |  1 |
     | s4 |  0 |  0 |  0 |  0 |  1 |  0 |  0 |  0 |  0 |  0 |   | 0 |  0 |  1 |  0 |  0 |
     |    |    |    |    |    |    |    |    |    |    |    |   |   |    |    |    |    |
     
     
  
   Introduce intermediate signals for 10-input AND gates:
   s0 ≡ (p0 & ~p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6 ~p7 & ~p8 & ~p9)
   s1 ≡ (~p0 & p1 & ~p2 & ~p3 & ~p4 & ~p5 & ~p6 ~p7 & ~p8 & ~p9)
   ..............
   From truth tables to logical formula, we see
    m3 ≡ (s8 v s9)
    m2 ≡ (s4 v s5 v s6 v s7),  ≡ read if only if
    m1 ≡ (s2 v s3 v s6 v s7)
    m0 ≡ (s1 v s3 v s5 v s7 v s9)
    r ≡ ~(s1 v s2 v s3 v s4 v s5 v s6 v s7 v s8 v s9)

  Method:from truth table to logic formula  
  From a truth table column for output z depending on inputs p1,p2, up to pn, (in truth table with 2 ^ n rows)
  1) Look down column for output z and identify each of the rows in which output is 1.
  2) For each such row, write down the size-n conjunction of inputs or negated inputs which uniquely describes that
     row: if input pi is 0 on that row, include ~pi in conjunction; if input pi is 1 on that row, include pi in conjunction.
  3) Output z is equivalent to the disjunction of all these row-conjunctions; if there are m-many rows in which output
     z is 1, then it will be a size-m disjunction.


  Disjunctive Normal Form
  A logic formula A is in disjunctive normal form (DNF) iff A is a disjunction of conjunctions of literals,
  where a literal is either an atomic proposition or the negation of an atomic proposition.
  Called sum-of-products (SOP) form in digital systems and Boolean algebra literature.    
     
  
  DNF circutir can be easily transfered to NAND only gates circuit.

    
**** 2-in multiplexer (MUX)
     Functional description:
     take as input two data input signals x and y, together with a select input signal s,
     and produce as output data signal z such that z ≡ x if s is 0 and z ≡ y if s is 1.
     input data: x, y
     imput signal: s
     output: z
     3-inout, 1-output system
     
     Truth table
     | row | x | y | s | z | s = 0 | s = 1 | row conjuction/minterm(product term) |
     |-----+---+---+---+---+-------+-------+--------------------------------------|
     |   0 | 0 | 0 | 0 | 0 | z ≡ x |       |                                      |
     |   1 | 0 | 0 | 1 | 0 |       | z ≡ y |                                      |
     |   2 | 0 | 1 | 0 | 0 | z ≡ x |       |                                      |
     |   3 | 0 | 1 | 1 | 1 |       | z ≡ y | (~x&y&s)                             |
     |   4 | 1 | 0 | 0 | 1 | z ≡ x |       | (x&~y&~s)                            |
     |   5 | 1 | 0 | 1 | 0 |       | z ≡ y |                                      |
     |   6 | 1 | 1 | 0 | 1 | z ≡ x |       | (x&y&~s)                             |
     |   7 | 1 | 1 | 1 | 1 |       | z ≡ y | (x&y&s)                              |
     
     
     Logical formula characterise the output signal 'z', expressed using bi-conditional.
     z ≡ ((~x&y&s) v (x&~y&~s) v (x&y&~s) v  (x&y&s)) this is DNF formula
     in the boolean algebra and digital system literature, minterms or product term, because logical 
     onjuction is the boolean product operation.

     Is that DNF is smallest??
     
     

     
     


*** DONE 3.4 Minimizing Logic Circuits Using K-Maps (26:40)
    CLOSED: [2015-03-18 Wed 09:15] SCHEDULED: <2015-03-17 Tue>
    CLOCK: [2015-03-18 Wed 07:16]--[2015-03-18 Wed 09:13] =>  1:57
    :PROPERTIES:
    :Effort:   26:40
    :END:
    Karnaugh map method is a systematic method for deriving a minimal DNF from the
    truth table for a propositional logic formula or combinational system.
*** DONE Practice Quiz: §3 Combinational Digital Systems
    CLOSED: [2015-03-18 Wed 09:12] SCHEDULED: <2015-03-17 Tue>
*** DONE Graded Quiz: §3 Combinational Digital Systems 
    CLOSED: [2015-03-18 Wed 09:12] SCHEDULED: <2015-03-18 Wed>

** 4: Vagueness (Application: Philosophy) - Անորոշություն
*** TODO 4.1 Vagueness: The Sorites Paradox (7:44)
*** 4.2 Vagueness: One Option-Revising Our Logic (17:08)
*** 4.3 Vagueness: Another Option-Resist the Premises (14:47)
*** Practice Quiz: §4 Vagueness 

** 5: Implicature and Implication (Application: Linguistics)
*** TODO 5.1 Linguistics: Introducing Language and Logic (7:52)
*** 5.2 Linguistics: Entailment & Implicature (14:02)
*** 5.3 Linguistics: Implicatures & Connectives (10:19)
*** Practice Quiz: §5 Implication and Implicature 

** 6: Propositional Logic Programming (Application: Computer Science) 
*** DONE 6.1 Logic, Computers & Automated Reasoning (12:47)
    CLOSED: [2015-03-20 Fri 08:43] SCHEDULED: <2015-03-20 Fri>
    Logic and Computers
    1. Computer Software
       * used in semantics of programming languages
       * analysis of programs
       * automated reasoning intelligance
    2. Computer Hardware - analysis and design digital circuits grounded in logic:
       * combinational circuits = classical propositional logic
       * sequential circuits = propositional temproal logic or predicate logic. 
    
    Pre-history of Automated Reasoning
    * Thomas Hobbes (1588-1679) 
      Human reasong or ratiocination
    * Gottfried Wilhelm Leibniz (1646-1716)
      characteritica universalis - a universal symbolic langugage for science, math and philosophy.
    * David Hilbert (1862-1943)
      Hilbert's mathematical program(1920): attempting to show that all of mathematics follows from
      a correctly chosen finite system of axioms; and that some such axioms system can be shown to be
      provably consistent.
    * Kurt Godel(1906-1978) 
      Godel's invompleteness theorems (1931):
      any formal logic system expressive enough to describe arithmetic on the natural numbers
      (1) is incomplete if it is consistent; and
      (2) the consistency of the system cannot be proved within the system itself.
    * Alan Turing (1912-954)
      Turing formalised concepts of computation and algorithm with Logical Computing Machine
      model, subsequently called Turing machine model.
      Turing 1936: the Halting Problem for Turing machines is algorithmically undecidable:
      it is not possible to decide algorithmically whether a given Turing machine will halt on a given input.

    Computing logical consequence
    to programm computer to think logically the core job to compute consequence 
    given logical formulas A1, A2,..., An and B determine wheather or not:
    A1, A2,..., An |= B
    Direct semantic evaluation in Propositional Logic: k-many atomic propositions in A1, A2,..., An and B  gives
    2 ^ k-many truth table rows/valuations, so an explicit check of all of these is dumb  and impractical.

    Practical Automated Reasoning
    To find decidable, and practically computable, classes of logical consequence problem:
    ▶ restrict to a simple fragment of the language: program clauses and goals (together known as Horn clauses);
    ▶ use a proof system with only one rule: keep it simple for dumb machines!

    Logic Programming is a direct, declarative style of computer programming using logic-based languages such as
    prolog or datalog.

*** DONE 6.2 Logic Programming in PROLOG (13:00)
    CLOSED: [2015-03-21 Sat 07:55] SCHEDULED: <2015-03-21 Sat>
    1) Practical Automated Reasoning
    To find decidable, and practically computable, classes of logical consequence problem:
    ▶restrict to a simple fragment of the language: 
    program clauses and goals;
    * A program clause or definite clause is a formula of one of two kinds:
      1) conditional rule - (p1 & p2 & ... & pn) => q, where n>=0, and p1, p2, ..., pn, q all atomic formulas.(case n=0 gives facts.)
      2) fact             - q
    * Logic program
      A logic program P is a list A1, A2,...,An of program clauses. 
    * Goals
      A goal G is s list r1,r2,..,rk of atmos, and the corresponding goal formula is the conjuction 
      B = (r1 & r2 & ... & rk)
    * Automated reasoning task: determine wheather or not: 
      P |= G that is, A1, A2,..., An |= B
    ▶use a proof system with only one rule: a resolution rule; keep it simple for dumb machines!
    Logic Programming is a direct, declarative style of computer programming using logic-based languages such as
    prolog or datalog.

    

    

*** TODO 6.3 PROLOG Project: Sudoku Puzzles (15:52)
    SCHEDULED: <2015-03-22 Sun>
*** 6.4 How PROLOG Answers Queries (17:08)
*** 6.5 Negation in PROLOG (6:55)
*** Practice Quiz: §6 Propositional Logic Programming 

** PROLOG programming languages
   [[http://www.swi-prolog.org/download/stable][SWI-Prolog stable versions]]
*** Program clauses and logic programs in PROLOG
    A program clause or definite clause is written in prolog as:
    q :- p_1, p_2,..., p_m.
    or
    q.
    where m >= 0 and p_1, p_2,...,p_m, q are all atomic formulas. (Case m = 0 gives facts.)
    Read ":-" as "if", and commas between p_i's as "and"
    ":-" - reverse conditional
*** Prolog idiosyncracies
    ▶ Meaning of program clauses (m>=1): We can establish the atom q if we first establish all of
    p_1,p_2, and up to p_m.
    ▶Facts q. have no body, just a head.
    ▶Atoms must have names starting with a lower-case letter, then followed by upper-case letters, 
    lower-case letters, digits or an underscore _. 
    ▶Program clauses must end with “.” .
    ▶The order of atoms within a clause, and the order of program clauses in a program, both matter 
    in how prolog runs.

* [[https://class.coursera.org/nand2tetris1-001/lecture][From Nand to Tetris / Part I]]
  :UNIVERSITY: The Hebrew University of Jerusalem
  :AUTHOR: Shimon Schocken, Noam Nisan
  
  [[http://nand2tetris.org/software.php][Nand2Tetris Software Suite]]


** [[https://class.coursera.org/nand2tetris1-001/wiki/week_0][Week 0: Introduction]]
   In a nutshell: course introduction and overview, the roles of abstraction and implementation in systems design, the road ahead.
*** DONE Unit 0.0: Introduction
    CLOSED: [2015-04-12 Sun 08:12] SCHEDULED: <2015-04-12 Sun>
*** DONE Unit 0.1: The Road Ahead
    CLOSED: [2015-04-18 Sat 09:29] SCHEDULED: <2015-04-17 Fri>
*** DONE Unit 0.2: From Nand to Hack
    CLOSED: [2015-04-18 Sat 09:30] SCHEDULED: <2015-04-17 Fri>
*** DONE Unit 0.3: From Hack to Tetris
    CLOSED: [2015-04-18 Sat 09:30] SCHEDULED: <2015-04-17 Fri>
*** DONE Unit 0.4: Project 0 Overview
    CLOSED: [2015-04-18 Sat 09:31] SCHEDULED: <2015-04-17 Fri>
*** read [[http://www.nand2tetris.org/chapters/intro.pdf][Introduction]] chapter of The Elements of Computing Systems (the course's textbook)

** [[https://class.coursera.org/nand2tetris1-001/wiki/week_1][Week 1: Boolean Functions and Gate Logic]]
   In a nutshell: We will start with a brief introduction of Boolean algebra, and learn how Boolean functions can be physically 
   implemented using logic gates. We will then learn how to specify gates and chips using a Hardware Description Language (HDL), 
   and how to simulate the behaviour of the resulting chip specifications using a hardware simulator. This background will set 
   the stage for Project 1, in which you will build, simulate, and test 15 elementary logic gates. The chipset that you will 
   build this week will be later used to construct the computer's Arithmetic Logic Unit (ALU) and memory system. This will be 
   done in weeks 2 and 3, respectively.
*** DONE Unit 1.1: Boolean Logic(12:26)
    CLOSED: [2015-04-19 Sun 07:02] SCHEDULED: <2015-04-18 Sat>
    ▶2 way to describe FUnctions 
    • Formula
    • Truth Table
    ▶Boolean Identities
    • Commutative lows
      x && y = y && x
      x || y = y || x
    • Associative lows
      (x && (y && z)) = ((x && y) && z)
      (x || (y || z)) = ((x || y) || z)
    • Distributive lows
      (x && (y || z)) = (x && y) || (x && z)
      (x || (y && z)) = (x || y) && (x || z)
    • De Morgan laws
      ~(x && y) = ~x || ~y
      ~(x || y) = ~x && ~y
    • Idempotence low
      x && x = x
    • Double negation
      ~(~x) = x
    • 
    •
    •
    •
    •
    
*** DONE Unit 1.2: Boolean Functions Synthesis(09:49)
    CLOSED: [2015-04-21 Tue 20:29] SCHEDULED: <2015-04-19 Sun>
    ▶Truth table to Boolean expression?
    Given truth table how find boolean expression?
    | x | y | z | f |              |
    |---+---+---+---+--------------|
    | 0 | 0 | 0 | 1 | ~x & ~y & ~z |
    | 0 | 0 | 1 | 0 |              |
    | 0 | 1 | 0 | 1 | ~x &  y & ~z |
    | 0 | 1 | 1 | 0 |              |
    | 1 | 0 | 0 | 1 |  x & ~y & ~z |
    | 1 | 0 | 1 | 0 |              |
    | 1 | 1 | 0 | 0 |              |
    | 1 | 1 | 1 | 0 |              |
    |---+---+---+---+--------------|
    
    Constructing a disjunctive normal form formula for it, and it goes like this.
    1. look at rows which has value 1
    2. construct expression for that rows
    3. or all expressions

    ▶NAND function
    
    | x | y | NAND |
    |---+---+------|
    | 0 | 0 |    1 |
    | 0 | 1 |    1 |
    | 1 | 0 |    1 |
    | 1 | 1 |    0 |

    (x NAND y) = ~(x & y)
       
    ▶Theorem:  Any Boolean function can be represented using an expression containing &, ~ operations.
    Proof: 
    (x || y) = ~(~x & ~y)
    
    ▶Theorem:  Any Boolean function can be represented using an expression containing NAND operations.
    Proof:
    1. ~x = (x NADN x)
    2. (x & y) = ~(x NAND y)
    3. (x || y) = NOT[ NOT( A AND A ) AND NOT( B AND B )]   



*** DONE Unit 1.3: Logic Gates(10:05)
    CLOSED: [2015-04-21 Tue 21:28] SCHEDULED: <2015-04-21 Tue>
    ▶A technique for implementing Boolean functions using logic gates
    ▶Elementary (Nand, And, Or, Not, ...)
    • Nand
    1) gate diagram:
    2) functional specification:  if(a==1 and b==1) then out=0 else out=1
    3) truth table
    • And
    functional spec: if (a==1 and b==1) then out=1 else out=0
    • Or
    functional spec: if (a==1 or b==1) then out=1 else out=0
    • Not
    functional spec: if (in==0) then out=1 else out=0
    •
    
 
    ▶Composite (Mux, Adder)
    • 3-wire and
    functional spec: if (a==1 and b==1 and c==1) then out=1 else out=0
    
      
*** DONE Unit 1.4: Hardware Description Language(18:28)
    CLOSED: [2015-04-22 Wed 07:51] SCHEDULED: <2015-04-22 Wed>
    HDL
    Simulation
    Test
    Build in Hardware
    ▶Xor Gate Requirements 
    • spec: output 1 if one, and only one, of its input is 1.
    • Truth table:
    | a | b | out |
    |---+---+-----|
    | 0 | 0 | 0   |
    | 0 | 1 | 1   |
    | 1 | 0 | 1   |
    | 1 | 1 | 0   | 
    • From Truth table
    out = 1 when:
    a And Not(b)
    Or
    Not(a) And b
    
    ▶Gate Interface
    • HDL 
    /** Xor gate: out = (a And Not(b)) Or (Not(a) And b)) */
    
    CHIP Xor {
         IN a, b;
         OUT out;
         PARTS:
         Not (in=a, out=nota);
         Not (in=b, out=notb);
         And (a=a, b=notb, out=aAndNotb);
         And (a=aAndNotb, b=notaAndb, out=out);
         Or  (a=aAndNotb, b=notaAndb, out=out); 
         
    }
    
*** DONE Unit 1.5: Hardware Simulation(33:52)
    CLOSED: [2015-04-22 Wed 08:29] SCHEDULED: <2015-04-22 Wed>
*** DONE Unit 1.6: Multi-Bit Buses(08:53)
    CLOSED: [2015-04-23 Thu 17:27] SCHEDULED: <2015-04-22 Wed>
    ▶Arrays of Bits
    • Sometimes we manipulate "together" an array of bits 
    • It is conceptually convenient to think about such a group of bits
      as a single entity, sometimes termed "bus" - latin word menaing many, multiple.
    • HDLs will usually provide some convenient notation for handling these buses.
*** DONE Unit 1.7: Project 1 Overview(21:31)
    CLOSED: [2015-04-23 Thu 18:02] SCHEDULED: <2015-04-23 Thu>
    ▶Elementary Logic gates
    * Not
    * And
    * Or
    * Xor
    * Mux - Multiplexer
      if (sel==0)
        out=a
      else
        out=b
      
    * DMux - Demultiplexer
    ▶16-bit wariants
    * Not16
    * And16
    * Or16
    * Mux16
    ▶Multi-way varianrs
    * Or8Way
    * Mux4Way16
    * Mux8Way16
    * DMux4Way
    * DMux8Way
*** DONE Unit 1.8: Perspectives(09:44)
    CLOSED: [2015-04-23 Thu 18:40] SCHEDULED: <2015-04-23 Thu>
*** DONE DO Project 1: [[http://nand2tetris.org/01.php][Elementary Logic Gates.]]
    CLOSED: [2015-04-26 Sun 21:53] DEADLINE: <2015-04-25 Sat>
*** read [[http://www.nand2tetris.org/chapters/chapter%2001.pdf][Chapter 1]] of The Elements of Computing Systems.
*** read [[http://www.nand2tetris.org/chapters/appendix%20A.pdf][Appendix A: Hardware Description Language (HDL)]] of The Elements of Computing Systems
** [[https://class.coursera.org/nand2tetris1-001/wiki/week_2][Week 2: Boolean Arithmetic and the ALU ]]
*** DONE Unit 2.1: Binary Numbers
    CLOSED: [2015-04-26 Sun 07:40] SCHEDULED: <2015-04-26 Sun>
*** TODO Unit 2.2: Binary Addition
    SCHEDULED: <2015-04-26 Sun>
*** TODO Unit 2.3: Negative Numbers
    SCHEDULED: <2015-04-26 Sun>
*** TODO Unit 2.4: Arithmetic Logic Unit (ALU)
    SCHEDULED: <2015-04-26 Sun>
*** TODO Unit 2.5: Project 2 Overview
    SCHEDULED: <2015-04-26 Sun>
*** TODO Unit 2.6: Perspectives
    SCHEDULED: <2015-04-26 Sun>
*** TODO Do  Project 2: Boolean Arithmetic.
    DEADLINE: <2015-05-03 Sun>
*** 

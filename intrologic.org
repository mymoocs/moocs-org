* [[https://class.coursera.org/intrologic-004/lecture][oduction to Logic]]
  :UNIVERSITY: Stanford
  :AUTHOR: Michael Genesereth

** Lesson 1 - Introduction
*** DONE 1.1 Introduction to Logic (3 min) 
    CLOSED: [2015-03-14 Sat 10:42]
*** DONE 1.2 Elements of Logic (10 min) 
    CLOSED: [2015-03-15 Sun 21:16] SCHEDULED: <2015-03-15 Sun>
*** DONE 1.3 Formalization (9 min)
    CLOSED: [2015-03-16 Mon 10:53] SCHEDULED: <2015-03-16 Mon>
*** DONE 1.4 Automation (5 min)
    CLOSED: [2015-03-18 Wed 11:06] SCHEDULED: <2015-03-17 Tue>
    
*** DONE 1.5 Study Guide (4 min) 
    CLOSED: [2015-03-19 Thu 06:48] SCHEDULED: <2015-03-18 Wed>

** Lesson 2 - Propositional Logic
*** DONE 2.1 Propositional Logic (1 min) 
    CLOSED: [2015-03-20 Fri 07:05] SCHEDULED: <2015-03-19 Thu>
*** DONE 2.2 Syntax of Propositional Logic (7 min)
    CLOSED: [2015-03-20 Fri 07:25] SCHEDULED: <2015-03-19 Thu>
**** Propositiona Sentences
    * Simple(proposition constants) - express single facts about the world
    * Compound - express logical relationsheeps among simpler sentences of which composed
      1) Negation - target
      2) Conjuction - tha argument of conjuction are called conjucts
      3) Disjunction - disjuncts
      4) Implication (p=>q) - p: antecedent(ենթադրյալ), q:consequent (հետևանք)
      5) Reduction (q <= p) - q: consequent, p: antecedent
      6) Equivalence / Biconditional (p <=> q)
    * Precendence of connectives (նախորդում, ավելի բարձր դիրք, приоритет)
      ~
      &
      v
      =>, <=, <=>
**** Proposition Language
     is the set of all propositional sentences that can be formed from propositional vocabulary.
     1. Proposition vocabulary is a set/sequence of proposition constants.
     2. 
*** DONE 2.3 Semantics of Propositional Logic (10 min) 
    CLOSED: [2015-03-21 Sat 06:46] SCHEDULED: <2015-03-21 Sat>
    Evaluation procedure
    1) Replace proposition constants by their truth values.
    2) Use operator semantics to simplify compound sentences with truth values as arguments.
    3) Repeat this inside-out fashion to produce a value for the sentence as a whole.

*** DONE 2.4 Satisfaction (3 min)
    CLOSED: [2015-03-21 Sat 06:53] SCHEDULED: <2015-03-21 Sat>
    Satisfication procedure
    (1) Form a truth table for the proposition constants and add columns for each sentence in our set.
    (2) Evaluate each sentence for each of the rows ot the truth table.
    (3) Any row that satisfy al sentences int the set is a solution to the problem.
*** DONE 2.5 Properties of Sentences (3 min)
    CLOSED: [2015-03-21 Sat 17:28] SCHEDULED: <2015-03-21 Sat>
    1. Double Negation: p <=> ~~p
    2. deMorgan's Laws: 
       ~(p&q) <=> (~p v ~q)
       ~(p&q) <=> (~p & ~q)
    3. Implication Introduction:
       p => (q => p)
    4. Implication Distribution:
       (p => (q => r)) => ((p => q) => (p => r))
       



*** DONE 2.6 Logical Entailment (6 min)
    CLOSED: [2015-03-21 Sat 17:38] SCHEDULED: <2015-03-21 Sat>
    {p} |= (p v q)
    p logicali entails (p v q)
    logic1-ի վավերականույթուն ստուգելու նույն ալգորիթմով ստուգում ենք, if p entails (p v q)
    | p | q | p | (p v q) |   |
    |---+---+---+---------+---|
    | 1 | 1 | 1 |       1 | + |
    | 1 | 0 | 1 |       1 | + |
    | 0 | 1 | 0 |       1 |   |
    | 0 | 0 | 0 |       0 |   |
    |---+---+---+---------+---|

    {p,q} entails (p & q)
    p,q, premises
    (p & q) logical conclusion from promosies p and q
    | p | q | p | q | (p & q) |   |
    |---+---+---+---+---------+---|
    | 1 | 1 | 1 | 1 |       1 | + |
    | 1 | 0 | 1 | 0 |       0 |   |
    | 0 | 1 | 0 | 1 |       0 |   |
    | 0 | 0 | 0 | 0 |       0 |   |
    |---+---+---+---+---------+---|


*** DONE 2.7 The Big Game (3 min)
    CLOSED: [2015-03-21 Sat 18:33] SCHEDULED: <2015-03-21 Sat>
    Stanford people always tell the truth, and Berkeley people always lie.
    Unfortunately, by looking at a person, you cannot tell whether he is 
    from Stanford or Berkeley.
    You came to a fork in the road and want to get to the football
    stadium down one fork. However, you do not know which to take.
    There is a person standing there. What single question you can 
    ask him to help you decide which fork to take?

    | left | from stanford | Question | Response |   |
    |------+---------------+----------+----------+---|
    |    1 |             1 |        1 |        1 | + |
    |    1 |             0 |        0 |        1 |   |
    |    0 |             1 |        0 |        0 |   |
    |    0 |             0 |        1 |        0 |   |
    |------+---------------+----------+----------+---|
    Question: Is it the case that the left road the way to the stadium if and only if you are from Stanford?

** Lesson 3 - Propositional Satisfiability (Իրագործելիություն)
*** DONE 3.1 Propositional Satisfiability (16 min)
    CLOSED: [2015-03-22 Sun 12:58] SCHEDULED: <2015-03-21 Sat>

    [[http://www.boolsat.com/][Boolean Satisfiability Solver]]
    
    ▶SAT: determines wheather a set of propositional sentences is satisfiable.
    Logic problems react as SAT problems (e.g entailment)
    SAT solvers used in
    - Haedware design
    - Software analysis
    - Planning
    - Mathematics

   
    ▶Methods used in SAT
    1. Complete methods
    Guraranteed to give correct answer
    Truth Tables
    Backtracking search (Поиск с возвратом)

    2. Incomplete methods
    Not guraranteed to give correct answer
    Local Search

    ▶Example
    Let Ψ = {p v q, p v ~q, ~p v q, ~p v ~q v ~r, ~p v r}
    Q: is Ψ satisfiable? Thas there is exsit a truth assignment that satisfied every sentence in Ψ?
    Assume each sentence in Ψ is a disjunction of atmos or negated atoms
    Solution:
    • Truth Table method - Complete method
    | p | q | r | p v q | p v ~q | ~p v q | ~p v ~q v ~r | ~p v r | Ψ sat. |
    |---+---+---+-------+--------+--------+--------------+--------+--------|
    | 0 | 0 | 0 |     0 |      1 |      1 |            1 |      0 | no     |
    | 0 | 0 | 1 |     0 |      1 |      1 |            1 |      1 | no     |
    | 0 | 1 | 0 |     1 |      0 |      1 |            1 |      1 | no     |
    | 0 | 1 | 1 |     1 |      0 |      1 |            1 |      1 | no     |
    | 1 | 0 | 0 |     1 |      1 |      0 |            1 |      0 | no     |
    | 1 | 0 | 1 |     1 |      1 |      0 |            1 |      1 | no     |
    | 1 | 1 | 0 |     1 |      1 |      1 |            1 |      0 | no     |
    | 1 | 1 | 1 |     1 |      1 |      1 |            0 |      1 | no     |
    |---+---+---+-------+--------+--------+--------------+--------+--------|
    Complete: thruth table method is complete, because we examine every single truth assignment
    Impractical except for small examples
    rows
    * 2 ^ 3 = 8
    * 2 ^ 10 = 1024
    * 2 ^ 20 = 1 million (10 ^ 6)
    * 2 ^ 30 = 1 billion (10 ^ 9)
    * 2 ^ 40 = 1 trillion(10 ^ 12)
      
   • Partial assignments
       | p | q | r | p v q | p v ~q | ~p v q | ~p v ~q v ~r | ~p v r | Ψ sat. |
       |---+---+---+-------+--------+--------+--------------+--------+--------|
       |   |   |   |       |        |        |              |        |        |
       | 1 | 0 | ? |     1 |      1 |      0 |            1 |      ? | no     |
       | 1 | 0 | ? |     1 |      1 |      0 |            1 |      ? | no     | 
       |   |   |   |       |        |        |              |        |        | 
       |   |   |   |       |        |        |              |        |        | 
       |---+---+---+-------+--------+--------+--------------+--------+--------|
       because we have already the False in row and we do not need to check other 
       sentences, we already no that answer is no. 
   
   • Searching partial assignments instead of only complete assignments.
     Tree like 
                              ???
                             /    \
                       p false    p true
                      0??
                     /
        this idea base rise to the basic backtracking search
     
    
   ▶ Basic backtracking search
   Essential backtracking search optiomization 
   * Unit propagation
   * Pure Literal elimination
   Most modern complete SAT sovlers are based on variations of DPLL (Davis-Putman-Logemann-Loveland)
   * Clause Learning
   * Fast Propagation
   * Proposition selection heuristicc
     
         
   ➤ incomplete method 
   Some SAT problems still impractical for complete SAT sovlers
   Little opportunity for early pruning (Էտում)
   Consider method that answer correctly most of the time, but not every time
   
   GSAT: a prototype incomplete SAT solver
   WalkSAT: a modification of GSAT
    

** DONE Lesson 4 - Propositional Proofs (20 min)
   CLOSED: [2015-03-28 Sat 22:13] SCHEDULED: <2015-03-22 Sun>
*** DONE 4.1 Propositional Proofs (2 min)
    CLOSED: [2015-03-28 Sat 21:24]
*** DONE 4.2 Linear Proofs (8 min)
    CLOSED: [2015-03-28 Sat 21:24]
    [[https://spark-public.s3.amazonaws.com/intrologic/exercises/exercise_03_02_01.html][Excerise]]
*** DONE 4.3 Structured Proofs (5 min)
    CLOSED: [2015-03-28 Sat 21:42]
    [[https://spark-public.s3.amazonaws.com/intrologic/exercises/exercise_03_03_01.html][exercise]]
*** DONE 4.4 Fitch (3 min)
    CLOSED: [2015-03-28 Sat 22:08]
    [[https://spark-public.s3.amazonaws.com/intrologic/exercises/exercise_03_04_01.html][Video inline quize]]
*** DONE 4.5 Soundness and Completeness (2 min)
    CLOSED: [2015-03-28 Sat 22:08]

** DONE Lesson 5 - Propositional Resolution
   CLOSED: [2015-03-29 Sun 18:51] SCHEDULED: <2015-03-29 Sun>
   Пра́вило резолю́ций — это правило вывода, восходящее к методу доказательства теорем через поиск противоречий; используется в логике 
   высказываний и логике предикатов первого порядка. Правило резолюций, применяемое последовательно для списка резольвент, позволяет
   ответить на вопрос, существует ли в исходном множестве логических выражений противоречие.Правило резолюций предложено в 1930 
   году в докторской диссертации Жака Эрбрана для доказательства теорем в формальных системах первого порядка. Правило разработано 
   Джоном Аланом Робинсоном в 1965 году.
*** 5.1 Propositional Resolution (2 min)
*** 5.2 Clausal Form (5 min)
    [[https://spark-public.s3.amazonaws.com/intrologic/exercises/exercise_04_02_01.html][Exercise]]
*** 5.3 Resolution Principle (5 min)
    [[https://spark-public.s3.amazonaws.com/intrologic/exercises/exercise_04_03_01.html][Exercise]]
*** 5.4 Resolution Method (7 min)
    [[https://spark-public.s3.amazonaws.com/intrologic/exercises/exercise_04_04_01.html][Ex 1.]]
    [[https://spark-public.s3.amazonaws.com/intrologic/exercises/exercise_04_04_02.html][Ex 2.]]
    Clausal Form
    Premises: {p, p => q, (p => q) => (q => r)}
    Conlclusion: r
    
    | Premises:      | Clauses:  |
    |----------------+-----------|
    | p              | {p}       |
    | p => q         | {~p,q}    |
    | (p=>q)=>(q=>r) | {~p,~q,r} |
    |                | {~q,r}    |
    | ~r             | {~r}      |
    |----------------+-----------|

    Resolution proof:

    |---+-----------+---------|
    | 1 | {p}       | Premise |
    | 2 | {~p,q}    | Premise |
    | 3 | {~p,~q,r} | Premise |
    | 4 | {~q,r}    | Premise |
    | 5 | {~r}      | Premise |
    | 6 | {q}       | 1,2     |
    | 7 | {r}       | 4,6     |
    | 8 | {}        | 5,7     |
    |---+-----------+---------|
    #+TBLFM: $1=vlen(@I$1..0);EN

*** 5.5 Box Logic (out of focus) (04:21)

** TODO Lesson 6 - Relational Logic
*** 6.1 Relational Logic (2 min)
*** 6.2 Syntax (9 min)
*** 6.3 Semantics (8 min)
*** 6.4 Example - Sorority World (5 min)
*** 6.5 Example - Blocks World (4 min)
*** 6.6 Example - Modular Arithmetic (5 min)
*** 6.7 Example - Peano Arithmetic (6 min)
*** 6.8 Example Linked Lists (4 min)
*** 6.9 Example - Pseudo-English (5 min)
*** 6.10 Example - Metalevel Logic (6 min)
*** 6.11 Properties of Sentences (3 min)
*** 6.12 Logical Entailment (4 min)
*** 6.13 (Optional) Finite Relational Logic (7 min)
*** 6.14 (Optional) Omega Relational Logic (9 min)
*** 6.15 (Optional) General Relational Logic (4 min)
